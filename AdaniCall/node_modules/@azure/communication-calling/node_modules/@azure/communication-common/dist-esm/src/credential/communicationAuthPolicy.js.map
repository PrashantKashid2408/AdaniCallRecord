{"version":3,"file":"communicationAuthPolicy.js","sourceRoot":"","sources":["../../../src/credential/communicationAuthPolicy.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,iBAAiB,EAAkC,MAAM,kBAAkB,CAAC;AACrF,OAAO,EAAE,+BAA+B,EAAwB,MAAM,kBAAkB,CAAC;AACzF,OAAO,EAAE,4CAA4C,EAAE,MAAM,0CAA0C,CAAC;AACxG;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,6BAA6B,GAAG,CAC3C,UAA2C,EACrB,EAAE;IACxB,IAAI,iBAAiB,CAAC,UAAU,CAAC,EAAE;QACjC,OAAO,+BAA+B,CAAC,UAAU,EAAE,2CAA2C,CAAC,CAAC;KACjG;SAAM;QACL,OAAO,4CAA4C,CAAC,UAAU,CAAC,CAAC;KACjE;AACH,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isTokenCredential, KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { bearerTokenAuthenticationPolicy, RequestPolicyFactory } from \"@azure/core-http\";\nimport { createCommunicationAccessKeyCredentialPolicy } from \"./communicationAccessKeyCredentialPolicy\";\n/**\n * Creates a pipeline policy to authenticate request based\n * on the credential passed in.\n * @hidden\n *\n * @param credential - The KeyCredential or TokenCredential.\n */\nexport const createCommunicationAuthPolicy = (\n  credential: KeyCredential | TokenCredential\n): RequestPolicyFactory => {\n  if (isTokenCredential(credential)) {\n    return bearerTokenAuthenticationPolicy(credential, \"https://communication.azure.com//.default\");\n  } else {\n    return createCommunicationAccessKeyCredentialPolicy(credential);\n  }\n};\n"]}